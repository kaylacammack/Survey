body {
    background-color: #FFF;
    margin: 0 auto;
}

header {
    background-color: #466995;
    border-bottom: 1px solid #466995;
    /* position: absolute element will scroll with the rest of the document when a user scrolls */
    /* position: absolute; */
    /* position: fixed the element will remain fixed to its position no matter where the user scrolls on the page */
    position: fixed;
    width: 100%;
    /* Z-index does not work on status positions. The Z-index property controls how far back or how far forward an element should appear on the web page when elements overlap. */
    z-index: 1;
}

ul {
    margin: 30px auto;
    padding: 0 20px;
    text-align: center;
}

li {
    color: #FFF;
    font-family: 'Oswald', sans-serif;
    font-size: 16px;
    font-weight: 300;
    text-transform: uppercase;
    display: inline-block;
    width: 80px;
}

li:hover {
    color: #DBE9EE;
}

h1 {
    color: 466995;
    font-family: 'Oswald', sans-serif;
    font-size: 32px;
    font-weight: 300;
    text-transform: uppercase;
}

h2 {
    color: #333;
    font-family: 'Varela Round', sans-serif;
    font-size: 26px;
    font-weight: 100;
    margin: 0 auto 20px auto;
}

h3 {
    color: #466995;
    font-family: 'Oswald', sans-serif;
    font-size: 18px;
    text-align: center;
    font-weight: 700;
    text-transform: uppercase;
    padding: 30px;
}

h4 {
    color: #466995;
    font-family: 'Oswald', sans-serif;
    font-size: 18px;
    font-weight: 300;
    letter-spacing: 2px;
    text-align: center;
    text-transform: uppercase;
}

p {
    color: #333;
    font-family: 'Varela Round', sans-serif;
    font-size: 18px;
}

footer {
    background-color: #D8E9EE;
    text-align: center;
    height: 100px;
}

.welcome {
    background-color: #D8E9EE;
    box-sizing: border-box;
    padding: 40px;
    text-align: center;
    width: 100%;
    position: relative;
    top: 50px;
}

.question {
    text-align: center;
    /* position: static does nothing. It simply refers to the default behavior. */
    /* position: static; */
    /* position: relative; */
    /* position sticky keeps an element in the document flow as the user scrolls, but sticks to a specified position as the page is scrolled further*/
    position: sticky;
    top: 40px;
    /* The clear property specifies how elements should behave when they bump into each other on the page. Will not allow other elements to touch it */
    clear: left;
}

.answer {
    border: 1px solid #466995;
    margin: 20px;
    /* display: inline-block; */
    /* float: left; */
}

.answer:hover {
    background: #C0D6DF;
    color: #FFF;
}

/* SECTION Review */

/* SECTION The CSS clear property */

/* This determines that no other elements within the same containing element are allowed to float on the left side of this element. */
.element {
    clear: left;
}

/* This determines that no other elements within the same containing element are allowed to float on the right side of this element */
.element {
    clear: right;
}

/* This determines that no elements within the same containing element are allowed to float on either side of this element. */
.element {
    clear: both;
}

/* This determines that other elements within the same containing element are allowed to float on both side of this element. */
.element {
    clear: none;
}

/* The CSS clear property specifies how an element should behave when it bumps into another element within the same containing element. The clear is usually used in combination with elements having the CSS float property. This determines on which sides floating elements are allowed to float. */

/* SECTION CSS display property */

.container1 {
    display: block;
}

.container2 {
    display: inline;
}

.container3 {
    display: inline-block;
}

/* The CSS display property determines the type of render block for an element. The most common values for this property are block, inline, and inline-block. */
/* Block-level elements take up the full width of their container with line breaks before & after, and can have their height and width manually adjusted. */
/* Inline elements take up as little space as possible, flow horizontally, and cannot have their width or height manually adjusted. */
/* Inline-block elements can appear next to each other, and can have their width & height manually adjusted - Does not start a new line */

/* SECTION Fixed CSS Positioning */
#navbar {
    position: fixed;
}

/* Positioning in CSS provides designers and developers options for positioning HTML elements on a web page. The CSS position  can be set to static, relative, absolute or fixed. When the CSS position has a value of fixed, it is set/pinned to a specific spot on a page. The fixed element stays the same regarding of scrolling. The navigation bar is a great example of an element that is often set to position: fixed; enabling the user to scroll through the web page and still access the navigation bar. */

/* SECTION CSS z-index property */

/* 'element1' will overlap 'element2' */
.element1 {
    position: absolute;
    z-index: 1;
}

.element2 {
    position: absolute;
    z-index: -1;
}

/* The CSS z-index property specifies how far back or how far forward an element will appear on a web page when it overlaps other elements. */
/* The z-index property uses integer values, which can be positive or negative values. The element with the highest z-index value will be at the foreground, while the element with the lowest z-index value will be at the back. */

/* SECTION CSS float property */

/* The content will float to the left side of the container */
.left {
    float: left;
}

/* The content will float to the right side of the container */
.right {
    float: right;
}

/* The CSS float property determines how far left or how far right an element should float within its parent element. The value left floats an element to the left side of its container and the value right floats an element to the right side of its container. For the property float, the width of the container must be specified or the element will assume the full width of its containing element. */

